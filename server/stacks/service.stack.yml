AWSTemplateFormatVersion: '2010-09-09'
Description: Live Streaming Proxy
Parameters:

  VPCStack:
    Default: 'video-streaming-vpc'
    Type: String
    Description: VPC Stack Name

  ECSStack:
    Default: 'video-streaming-ecs'
    Type: String
    Description: ECS Stack Name

  ProxyStack:
    Default: 'video-streaming-proxy'
    Type: String
    Description: Proxy Stack Name

  AssetsStack:
    Default: 'video-streaming-assets'
    Type: String
    Description: Assets Stack Name

  DesiredCount:
    Type: Number
    Default: '2'
    Description: Desired task count

  Version:
    Type: String
    Description: Service version

  ContainerPort:
    Type: String
    Description: Container Port
    Default: 1935

Resources:

  CloudWatchLogsGroup:
    Type: AWS::Logs::LogGroup
    Properties:
      LogGroupName: !Ref AWS::StackName
      RetentionInDays: 365

  # Task Role
  TaskRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-task-${AWS::StackName}
      Path: /
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
            Effect: Allow
            Principal:
              Service:
                - ecs-tasks.amazonaws.com
            Action: sts:AssumeRole
      Policies:
        - PolicyName: !Sub ecs-service-${AWS::StackName}
          PolicyDocument:
            Version: 2012-10-17
            Statement:
              - Effect: Allow
                Action:
                  - '*'
                Resource:
                  - '*'

  # A role needed by ECS
  ExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Sub ecs-execution-${AWS::StackName}
      AssumeRolePolicyDocument:
        Statement:
          - Effect: Allow
            Principal:
              Service: ecs-tasks.amazonaws.com
            Action: 'sts:AssumeRole'
      ManagedPolicyArns:
        - 'arn:aws:iam::aws:policy/service-role/AmazonECSTaskExecutionRolePolicy'

  TaskDefinition:
    Type: AWS::ECS::TaskDefinition
    Properties:
      Family: !Ref AWS::StackName
      TaskRoleArn: !GetAtt TaskRole.Arn
      ExecutionRoleArn: !GetAtt ExecutionRole.Arn
      NetworkMode: awsvpc
      RequiresCompatibilities:
        - FARGATE
      # 256 (.25 vCPU) - Available memory values: 0.5GB, 1GB, 2GB
      # 512 (.5 vCPU) - Available memory values: 1GB, 2GB, 3GB, 4GB
      # 1024 (1 vCPU) - Available memory values: 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB
      # 2048 (2 vCPU) - Available memory values: Between 4GB and 16GB in 1GB increments
      # 4096 (4 vCPU) - Available memory values: Between 8GB and 30GB in 1GB increments
      Cpu: 2048
      # 0.5GB, 1GB, 2GB - Available cpu values: 256 (.25 vCPU)
      # 1GB, 2GB, 3GB, 4GB - Available cpu values: 512 (.5 vCPU)
      # 2GB, 3GB, 4GB, 5GB, 6GB, 7GB, 8GB - Available cpu values: 1024 (1 vCPU)
      # Between 4GB and 16GB in 1GB increments - Available cpu values: 2048 (2 vCPU)
      # Between 8GB and 30GB in 1GB increments - Available cpu values: 4096 (4 vCPU)
      Memory: 4GB
      ContainerDefinitions:
        - Name: !Ref AWS::StackName
          Image: !Sub "${AWS::AccountId}.dkr.ecr.us-east-1.amazonaws.com/${AWS::StackName}:${Version}"
          PortMappings:
            - ContainerPort: !Ref ContainerPort
          Environment:
            - Name: AWS_REGION
              Value: !Ref AWS::Region
            - Name: ENV
              Value: 'production'
            - Name: NODE_ENV
              Value: 'production'
            - Name: AWS_ACCOUNT_ID
              Value: !Ref AWS::AccountId
            - Name: ASSETS_BUCKET
              Value:
                Fn::ImportValue:
                  !Sub "${AssetsStack}-AssetsBucket"
          LogConfiguration:
            LogDriver: awslogs
            Options:
              awslogs-group: !Ref AWS::StackName
              awslogs-region: !Ref AWS::Region
              awslogs-stream-prefix: ecs

  ContainerSecurityGroup:
    Type: AWS::EC2::SecurityGroup
    Properties:
      GroupDescription: !Ref AWS::StackName
      VpcId:
        Fn::ImportValue:
          !Sub "${VPCStack}-VPCID"
      SecurityGroupIngress:
        - IpProtocol: tcp
          FromPort: !Ref ContainerPort
          ToPort: !Ref ContainerPort
          SourceSecurityGroupId:
            Fn::ImportValue:
              !Sub "${ProxyStack}-ContainerSecurityGroup"

  DnsNamespace:
    Type: AWS::ServiceDiscovery::PrivateDnsNamespace
    Properties:
      Name: 'internal.finbits.io'
      Vpc:
        Fn::ImportValue:
          !Sub "${VPCStack}-VPCID"

  ServiceDiscovery:
    Type: AWS::ServiceDiscovery::Service
    Properties:
      DnsConfig:
        DnsRecords:
          - Type: A
            TTL: 60
        RoutingPolicy: WEIGHTED
      Name: !Ref AWS::StackName
      NamespaceId: !Ref DnsNamespace

  Service:
    Type: AWS::ECS::Service
    Properties:
      ServiceName: !Ref AWS::StackName
      Cluster:
        Fn::ImportValue:
          !Sub "${ECSStack}-ECSCluster"
      DesiredCount: !Ref DesiredCount
      TaskDefinition: !Ref TaskDefinition
      LaunchType: FARGATE
      NetworkConfiguration: 
        AwsvpcConfiguration:
          AssignPublicIp: ENABLED
          Subnets:
            - Fn::ImportValue:
                !Sub "${VPCStack}-PublicSubnet1ID"
            - Fn::ImportValue:
                !Sub "${VPCStack}-PublicSubnet2ID"
          SecurityGroups:
            - !Ref ContainerSecurityGroup
      ServiceRegistries:
        - RegistryArn: !GetAtt ServiceDiscovery.Arn
      

Outputs:
  Service:
    Value: !Ref 'Service'
    Export:
      Name: !Sub '${AWS::StackName}-Service'
  TaskDefinition:
    Value: !Ref 'TaskDefinition'
    Export:
      Name: !Sub '${AWS::StackName}-TaskDefinition'
  CloudWatchLogsGroup:
    Value: !Ref 'CloudWatchLogsGroup'
    Export:
      Name: !Sub '${AWS::StackName}-CloudWatchLogsGroup'
  ContainerSecurityGroup:
    Value: !Ref ContainerSecurityGroup
    Export:
      Name: !Sub '${AWS::StackName}-ContainerSecurityGroup'
  DnsNamespace:
    Value: !Ref DnsNamespace
    Export:
      Name: !Sub '${AWS::StackName}-DnsNamespace'
  ServiceDiscovery:
    Value: !Ref ServiceDiscovery
    Export:
      Name: !Sub '${AWS::StackName}-ServiceDiscovery'